{"version":3,"sources":["index.js"],"names":["Result","validatorFn","data","result","hasErrors","Object","keys","length","fn","_runValidator","createRule","defaultMsg","args","msg","value","apply","concat","success","undefined","validate"],"mappings":";AAsDO,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,QAAA,gBAAA,EAtDDA,IAAAA,EAsDC,WArDOC,SAAAA,EAAAA,EAAaC,GAAM,EAAA,KAAA,GACxBC,KAAAA,OAAS,KACTF,KAAAA,YAAcA,EACdC,KAAAA,KAAOA,EACPE,KAAAA,WAAY,EAiDd,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,gBA9CW,MAAA,WACV,KAAKF,KACFC,KAAAA,OAAS,KAAKF,YAAY,KAAKC,MAE/BC,KAAAA,OAAS,KAAKF,YAEhBG,KAAAA,UAAgD,IAApCC,OAAOC,KAAK,KAAKH,QAAQI,SAwCvC,CAAA,IAAA,UArCGC,MAAAA,SAAAA,GACF,OAAA,KAAKJ,UAAkB,MACtBK,KAAAA,gBACD,KAAKL,UAAkB,MAE3BI,IACO,SA+BJ,CAAA,IAAA,OA5BAA,MAAAA,SAAAA,GACC,OAAA,KAAKJ,WACPI,EAAG,KAAKL,QACD,OAGJM,KAAAA,gBAED,KAAKL,WACPI,EAAG,KAAKL,QACD,MAGF,QAeJ,CAAA,IAAA,YAZO,MAAA,WAEH,OADFM,KAAAA,gBACE,KAAKN,WAUT,EAAA,GANMO,EAAa,SAACC,EAAYH,GAAO,OAAA,WAAII,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAJ,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAIA,EAAJ,GAAA,UAAA,GAAa,OAAA,SAAAC,GAAO,OAAA,SAAAC,GACzDN,OAAAA,EAAGO,MAAM,KAAMH,EAAKI,OAAOH,GAAOF,EAAYG,QAKhD,QAAA,WAAA,EAFPJ,EAAWO,aAAUC,EAEd,IAAMC,EAAW,SAAClB,EAAaC,GACpCA,OAAAA,EAAO,IAAIF,EAAOC,EAAaC,GAAQ,IAAIF,EAAOC,IAD7C,QAAA,SAAA","file":"index.map","sourceRoot":"../src","sourcesContent":["class Result {\n  constructor(validatorFn, data) {\n    this.result = null;\n    this.validatorFn = validatorFn;\n    this.data = data;\n    this.hasErrors = false;\n  }\n\n  _runValidator() {\n    if (this.data) {\n      this.result = this.validatorFn(this.data);\n    } else {\n      this.result = this.validatorFn;\n    }\n    this.hasErrors = Object.keys(this.result).length !== 0;\n  }\n\n  Success(fn) {\n    if (this.hasErrors) return this;\n    this._runValidator();\n    if (this.hasErrors) return this;\n\n    fn();\n    return this;\n  }\n\n  Fail(fn) {\n    if (this.hasErrors) {\n      fn(this.result);\n      return this;\n    }\n\n    this._runValidator();\n\n    if (this.hasErrors) {\n      fn(this.result);\n      return this;\n    }\n\n    return this;\n  }\n\n  getResult() {\n    this._runValidator();\n    return this.result;\n  }\n}\n\nexport const createRule = (defaultMsg, fn) => (...args) => msg => value => {\n  return fn.apply(null, args.concat(msg || defaultMsg, value));\n};\n\ncreateRule.success = undefined;\n\nexport const validate = (validatorFn, data) =>\n  data ? new Result(validatorFn, data) : new Result(validatorFn);"]}